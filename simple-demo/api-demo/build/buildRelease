#!/bin/bash

[ "$#" -lt 1 ] && echo "You must enter a string with one or more of 'all|allsecure|build|scan|test|push'" && exit

op=$1
local=car-dealership
image=mattapidemo/$local

[[ "$op" == *"secure"* ]] && scan=true

if [[ "$op" == *"all"* ]]; then
  build=true && test=true && push=true
else
  [[ "$op" == *"test"* ]] && test=true
  [[ "$op" == *"build"* ]] && build=true
  [[ "$op" == *"scan"* ]] && scan=true
  [[ "$op" == *"push"* ]] && push=true
fi

build_image () {
  echo; echo "Building $local from Dockerfile"
  docker build -t $local . > /dev/null 
  [[ "$?" != "0" ]] && echo "Build image FAILED, exiting" && exit 1
  docker tag $local $image
  return 0
}

test_image () {
  echo; echo "Performing unit tests (running pylint on python code) ..";
  pycheck car-dealership.py
  read -p "Is the code good enough to continue(y/n)? " -n 1 -r
  echo
  if [[ $REPLY =~ [Yy]$ ]]; then 
    echo "Unit tests PASSED."
  else
    echo "Unit tests FAILED."
    exit
  fi
}


scanErrMsg="Security scan FAILED, exiting, secure it before you commit it!"
scan_image () {
  echo; echo "Scanning $image for vulnerabilities and compliance issues"
  scanImage $image 
  [[ "$?" != "0" ]] && echo $scanErrMsg && exit 2
}

push_image () {
  echo; echo "Pushing $image to dockerhub, be patient"
  docker push $image 1>  /dev/null
  [[ "$?" != "0" ]] && echo "Push image FAILED, exiting" && exit 3
}

[ "$test" == "true" ] && test_image

[ "$build" == "true" ] && build_image

[ "$scan" == "true" ] && scan_image

[ "$push" == "true" ] && push_image

echo 
echo "---------------------------------------------------------------------------------------"
echo "   PASS: successfully completed build pipeline for $image"
echo "   READY for DEPLOYMENT"
echo "---------------------------------------------------------------------------------------"
echo
